---
title: "Exploring Data"
subtitle: "RAdelaide 2024"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | Telethon Kids Institute
date: "2024-07-11"
date-format: long
title-slide-attributes:
    data-background-color: "#3d3d40"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [bodl.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
    slide-number: c
    show-slide-number: all
  html: 
    css: [bodl.scss, extra.css]
    output-file: exploring.html
    embed-resources: true    
    toc: true
    toc-depth: 1    
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>    
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center  
    fig.height: 8
    fig.width: 10
---

```{r load-pigs, echo=FALSE}
library(tidyverse)
pigs <- read_csv("data/pigs.csv")
```



## Exploring Data

Now we have loaded some data into R

- What does it look like?
- Can we obtain summary tables?

. . .

We'll start with some basic approaches $\rightarrow$ more sophisticated

## Basic Plotting

- `R` comes with some basic plotting capabilities
- Can be easy to quickly explore $\rightarrow$ difficult to tweak
- Later we'll thoroughly explore `ggplot2`
    + Is now the gold standard for data visualisation
    
. . .
    
- `plot()` is useful for quick *x vs. y* plots
- `boxplot()` is also fairly intuitive
    
## Basic Plotting

- The values in any column can be obtained using `$`

```{r}
## Look at all of the odontoblast lengths
pigs$len
```

- We'll discuss in great (!!!) detail later

## Basic Plotting

- Passing this to `plot()` will plot the values in order

```{r plot-len}
#| output-location: default
#| fig-width: 7
plot(pigs$len)
```

::: {.notes}
- If we had another numeric value we could've compared in a classic x vs y
:::

## Basic Boxplots

- To make a boxplot we can plot `len` as our response variable
    + Could take either `supp` or `dose` as the predictor
- R uses *formula syntax*
    + `len ~ supp` $\implies$ `len` **depends on** `supp`

```{r}
#| output-location: slide
## Show length as being dependent on supp
boxplot(len ~ supp, data = pigs)
```

. . .

- Try changing `supp` to `dose`

## Basic Boxplots

- We can show `len` as depending on both using `+`

```{r}
#| output-location: slide
## Show length as being dependent on both supp & dose
boxplot(len ~ supp + dose, data = pigs)
```

# Exploring Data Using `dplyr` {background-color="#3d3d40" background-image=https://d33wubrfki0l68.cloudfront.net/621a9c8c5d7b47c4b6d72e8f01f28d14310e8370/193fc/css/images/hex/dplyr.png background-size="40%" background-opacity="0.5" background-position='80% 50%'}

## Introducing `dplyr`

- `dplyr` is a core `tidyverse` package
    + Always loaded with `library(tidyverse)`
- Amazingly useful for
    + Exploring Data
    + Cleaning (i.e. tidying) Data
    + Modifying & Manipulating Data
    + Summarising Data
- Contains many *Excel-like* functions

## Sorting Data

- By default, `pigs` is in the order we loaded it
- Can we sort by `len`?

. . .

- The function `arrange()`

## Sorting Data

- Here we call the function `arrange()`
    + The `data.frame` is the first argument
    + Any of the column names can then be passed after this
    

```{r}
## Sort by length
arrange(pigs, len)
```

## Sorting Data

- Have we changed the original object?

. . .

*Hint: To create an object in `R` we use `objectName <- data`*

## Sorting Data

- Sorting is done in increasing order by default
- To sort in decreasing order<br>$\implies$ wrap the column name inside the function `desc()`
    

```{r}
## Sort by length, in descending order
arrange(pigs, desc(len))
```

## Filtering Data

- `dplyr` also contains the function `filter()`

```{r}
## Just subset to the high dose
filter(pigs, dose == "High")
```

## Filtering Data

- Behind the scenes a logical test has been applied
- Can only return the values `TRUE` or `FALSE`

```{r}
1:5 > 2
```

. . .

- The symbol `==` applies the test *is equal to*
- The converse is `!=` $\implies$ *is NOT equal to*

## Filtering Data

- We could *exclude* the high dose values instead

```{r}
filter(pigs, dose != "High")
```

## Filtering Data

- Multiple filters are separated by a comma

```{r}
filter(pigs, dose == "High", supp == "OJ")
```

## Filtering Data

- Can also filter on numeric values

```{r}
filter(pigs, len > 20)
```

## Combining Functions

- Can we filter **then** sort?
    + Without modifying the original data?
    
. . .

- We need to pass the output of one function into the next

. . .

- Often referred to as *piping* data
    + Very familiar for those who know `bash`

## Combining Functions

Two options in `R`

1. The native pipe `>|` 
    + Introduced in R v 4.1 (2021)
2. The *magrittr* pipe `%>%`
    + Introduced around 2014
    + In the package `magrittr`
    
. . .

- Both behave similarly
- Code pre-2021 will always use `%>%`
- Code post-2021 may use either

## The package `magrittr`


![The Treachery of Images,Rene Magritte, 1929](https://hdwallpaperim.com/wp-content/uploads/2017/08/24/113744-pipes-Ren%C3%A9_Magritte-painting-minimalism.jpg)

## The package `magrittr`

![](assets/magrittr.png)

. . .

- I personally prefer `%>%` so we will use today
- `%>%` is loaded by `dplyr` *from* the package `magrittr`
    + The package implements some other useful functions &#128525;
    + Beyond the scope of today (probably)

## Combining Functions

- Both `|>` and `%>%` take the output of one function<br>$\implies$ place it as the *first argument* of a second
- Like sticking a pipe on the output of one<br>$\implies$ connecting it to the input of another
- Compare the pair

. . .

::: {.columns}

::: {.column}

```{r}
arrange(pigs, len)
```

:::

::: {.column}

```{r}
pigs %>% arrange(len)
```

:::

:::

